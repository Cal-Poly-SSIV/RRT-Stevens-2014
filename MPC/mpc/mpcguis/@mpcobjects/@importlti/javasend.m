function javasend(this, eventName, eventData)
% JAVASEND Handle events generated by LTI model import dialog.

%  Author:  Larry Ricker
%  Copyright 1986-2007 The MathWorks, Inc.
%  $Revision: 1.1.8.16 $ $Date: 2008/10/31 06:21:47 $

switch eventName
    case 'Show'
        localUpdateDialog(this)
        awtinvoke(this.javahandle,'setVisible(Z)',true);
    case 'Hide'
        % Note javasend can be called with eventName set to hide 
        % to build the dialog invisible (e.g. when open from Simulink)
        localUpdateDialog(this)
        awtinvoke(this.javahandle,'setVisible(Z)',false);
    case 'Window'
        browserRefresh(this);
    case 'Select'
        textRefresh(this);
    case 'Action'
        switch eventData
            case 'OK'
                mpcCursor(this.javahandle, 'wait');
                S = this.browser.getSelectedVar;
                Isel = this.javahandle.jProjectCombo.getSelectedIndex + 1;
                MPCGUI = this.Tasks(Isel);
                if ~isempty(S)
                    this.modelsource = this.browser.filename;
                    Struc = this.browser.getSelectedVarInfo;
                    if isa(S, 'mpc')
                        mpcupdatecetmstatus(this.SelectedRoot, ctrlMsgUtils.message('MPC:designtool:LoadingController'));                            
                        MPCGUI.MPCObject = {S, Struc.name};
                        MPCGUI.loadMPCobjects;
                        Done = 0; % Don't close window
                    else
                        mpcupdatecetmstatus(this.SelectedRoot, ctrlMsgUtils.message('MPC:designtool:LoadingPlantModel'));                            
                        if isa(S, 'idmodel')
                            % Convert IDMODEL to LTI state-space
                            try
                                S = ss(S);
                                Done = MPCGUI.getMPCModels.addModelToList(Struc,S);
                            catch ME
                                msg = ctrlMsgUtils.message('MPC:designtool:IDModelToSSFailed',Struc.name);
                                errordlg(msg, ctrlMsgUtils.message('MPC:designtool:DialogTitleError'), 'modal');
                                Done = 0;
                            end
                        else
                            Done = MPCGUI.getMPCModels.addModelToList(Struc,S);
                        end
                        if Done
                            mpcupdatecetmtext(this.SelectedRoot, ctrlMsgUtils.message('MPC:designtool:PlantModelImported',Struc.name));
                        else
                            mpcupdatecetmtext(this.SelectedRoot, ctrlMsgUtils.message('MPC:designtool:PlantModelImportCancel',Struc.name));
                        end
                        Done = 0;  % Override to prevent window closing
                        
                    end
                else
                    msg = ctrlMsgUtils.message('MPC:designtool:UnableToLoad');
                    errordlg(msg, ctrlMsgUtils.message('MPC:designtool:DialogTitleError'), 'modal');
                    Done = 0;
                end
                mpcupdatecetmstatus(this.SelectedRoot, xlate('Ready'));                
                if Done
                    awtinvoke(this.javahandle, 'setVisible(Z)', false);
                end
                mpcCursor(this.javahandle, 'default');
            case 'Cancel'
                awtinvoke(this.javahandle, 'setVisible(Z)', false);
            case 'Help'
                if any(strcmp(this.TypesAllowed,'mpc'))
                    mpcCSHelp('import_controller_cshelp');
                else
                    mpcCSHelp('import_plant_cshelp');
                end
            case 'WKSPC'
                % Workspace radio button has been selected
                Button=this.javahandle;
                awtinvoke(Button.jMATfileBox, 'setEnabled(Z)', false);
                awtinvoke(Button.jNameLabel, 'setEnabled(Z)', false);
                awtinvoke(Button.jBrowseButton, 'setEnabled(Z)', false);
                awtinvoke(Button.jBrowserLabel, 'setEnabled(Z)', true);
                Button.jBrowserLabel.setText('Items in your workspace:');
                this.browser.filename='';
                this.javahandle.jMATfileBox.setText('');
                browserRefresh(this);
                this.browser.javahandle.requestFocus;
            case 'MAT'
                % Matfile radio button has been selected
                Button=this.javahandle;
                awtinvoke(Button.jMATfileBox, 'setEnabled(Z)', true);
                Button.jMATfileBox.requestFocus;
                awtinvoke(Button.jNameLabel, 'setEnabled(Z)', true);
                awtinvoke(Button.jBrowseButton, 'setEnabled(Z)', true);
                this.browser.javahandle.removeAllItems;
                this.browser.variables=[];
                Button.jBrowserLabel.setText('');
                this.summary.newModel([],[]);
            case 'Browse'
                [Name,Path]=uigetfile('*.mat','Select a MAT-file',this.path);
                if Name ~= 0
                    this.path=Path;
                    this.javahandle.jMATfileBox.setText(Name);
                    this.modelsource=Name;
                    fileUpdate(this);
                end
            case 'Edit'
                this.modelsource=char(this.javahandle.jMATfileBox.getText);
                fileUpdate(this);
        end
end
% End of javasend

% --------------------------------------------------------------------

function fileUpdate(h)
% Respond to an update in the MAT file text box contents
File = [h.path,h.modelsource];
% Add .mat suffix if necessary
if length(File) < 4 || ~strcmpi(File(end-3:end),'.mat')
    h.browser.filename = [File,'.mat'];
else
    h.browser.filename = File;
end
if exist(h.browser.filename) == 2 %#ok<EXIST>
    h.javahandle.jBrowserLabel.setText('Items in your MAT-file:');
    browserRefresh(h);
    h.browser.javahandle.requestFocus;
else
    msg = ctrlMsgUtils.message('MPC:designtool:FileNotExist',h.browser.filename);
    errordlg(msg, ctrlMsgUtils.message('MPC:designtool:DialogTitleError'), 'modal');
    h.browser.filename='';
end

% +++++++++++++++++++++++++++++++++++++++++++++

function browserRefresh(this)
% Refresh the workspace/mat file viewer window
import javax.swing.*;

if this.javahandle.jMatfileButton.isSelected && ...
    isempty(this.browser.filename);
    return
end
this.browser.open;
if ~isempty(this.browser.variables)
    View=this.browser.javahandle;
    if View.getSelectedIndex < 0
        View.setSelectedIndex(0);
    end
    textRefresh(this);
end
% Need to refresh the "TO" combo box with names of mpc projects in
% the gui and highlight the selected one (if possible).

% Find the workspace node
[hJava, Root] = slctrlexplorer;
if isempty(Root) || ~ishandle(Root)
    return
end

% Find the task nodes and identify those from Simulink
if ishandle(this.SelectedRoot) && ishandle(this.SelectedRoot.up)
     this.Tasks = this.SelectedRoot.up.getChildren.find('-class', ...
         'mpcnodes.MPCGUI'); % Nodes may have been deleted
else
     this.Tasks = [];
end
if isempty(this.Tasks) % No tasks, close the dialog
    awtinvoke(this.javahandle,'setVisible(Z)',false);
    return
end
Hlin = get(this.Tasks,{'Linearization'});
Inolin = cellfun('isempty',Hlin);

% Simulink MPC tasks (with linearization) must come first in the list
% to eb processed by the java setupTaskCombo method
tasknames = get(this.Tasks,{'Label'});
tasknames = tasknames(:);
tasknames = [tasknames(~Inolin);tasknames(Inolin)];

% Build a list of linearization java panels for each of the MPC
% Simulink tasks
IndLinearizationTasks = find(~Inolin);
if ~isempty(IndLinearizationTasks)
    for k=length(IndLinearizationTasks):-1:1
        linPanel(k) = Hlin{IndLinearizationTasks(k)}.LinearizationDialog;
    end
else
    linPanel = [];
end

% Find selected task
Iselected = find(strcmp(this.SelectedRoot.Label,tasknames));
if isempty(Iselected)
    this.SelectedRoot = this.Tasks(1);
    Iselected = 1;
end
    
% Update the plant import dialog 
javatasknames = javaArray('java.lang.String',length(tasknames));
for k=1:length(tasknames)
    javatasknames(k) = java.lang.String(tasknames{k});
end

if ~any(strcmp(this.TypesAllowed,'mpc'))
   awtinvoke(this.javahandle,'setupTaskCombo',javatasknames,linPanel,Iselected-1);  
else
   awtinvoke(this.javahandle,'setupTaskCombo',javatasknames,[],Iselected-1);  
end

mpcupdatecetmstatus(this.SelectedRoot, xlate('Ready'));
set(handle(this.javahandle, 'callbackproperties'), ...
    'WindowDeactivatedCallback', {@LocalWindowDeactivationListener, this});

% --------------------------------------------

function LocalWindowDeactivationListener(Source, Event, this)
if ishandle(this) && ishandle(this.SelectedRoot)
    mpcupdatecetmstatus(this.SelectedRoot, '');
end

% +++++++++++++++++++++++++++++++++++++++++++++

function textRefresh(this)
S=this.browser.getSelectedVar;
Struc=this.browser.getSelectedVarInfo;
this.summary.newModel(S,Struc);

% +++++++++++++++++++++++++++++++++++++++++++++

function localUpdateDialog(this)

% Create the dialog if necessary and show it.
if isempty(this.javahandle)
    browser = mpcobjects.mpcbrowser;
    browser.javahandle.setActionCommand('OK');
    if ~isempty(this.TypesAllowed)
        browser.typesallowed = this.TypesAllowed;
    else
        browser.typesallowed={'ss', 'tf', 'zpk', 'idpoly', 'idss', ...
            'idarx', 'idgrey', 'idproc'};
    end
    if strcmp(this.TypesAllowed{1}, 'mpc')
        Title = 'MPC Controller Importer';
        Location = java.awt.Point(10,10);
        Name = 'ImportMPC';
    else
        Title = 'Plant Model Importer';
        Location = java.awt.Point(15,15);
        Name = 'ImportLTI';
    end
    this.browser = browser;
    this.browser.javahandle.setName([Name, '_Browser']);
    summary = mpcobjects.LTIsummary(400,150);
    this.summary = summary;
    this.javahandle = com.mathworks.toolbox.mpc.MPCimportModel( ...
        this, browser.javahandle); 
    this.javahandle.jOKButton.setText('Import');
    this.javahandle.jOKButton.setName([Name, '_Import']);
    this.javahandle.jCancelButton.setText('Close');
    this.javahandle.jCancelButton.setName([Name, '_Close']);
    this.javahandle.jHelpButton.setName([Name, '_Help']);
    this.javahandle.jMATfileBox.setName([Name, '_FileName']);
    this.javahandle.jBrowseButton.setName([Name, '_Browse']);
    this.javahandle.jMatfileButton.setName([Name, '_MATfile']);
    this.javahandle.jWorkspaceButton.setName([Name, '_Workspace']);
    this.javahandle.jStatePanel.add(summary.jScroll);
    this.javahandle.setTitle('Import Plant Model');
    this.javahandle.setSize(java.awt.Dimension(440,410)); % 440 should be wide enough
    this.javahandle.setResizable(false);
    this.javahandle.jProjectCombo.setEditable(false);  
    this.javahandle.jProjectCombo.setName([Name, '_ProjectCombo']);  
    this.javahandle.setTitle(Title);
    this.javahandle.setLocation(Location);   
end
