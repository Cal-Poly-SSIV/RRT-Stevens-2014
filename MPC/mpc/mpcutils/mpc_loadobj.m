function [mpcobj,projname,taskname,mpcname]=mpc_loadobj(filename,projname,taskname,mpcname)
% MPC_LOADOBJ Load MPC objects from a MAT file generated by the GUI
%
% mpcobjlist=MPC_LOADOBJ(filename) gets a list of all MPC objects stored
% in a MAT file. This can be a regular MAT file or a file generated by 
% the GUI.
%
% mpcobjlist=MPC_LOADOBJ(filename,projname) gets a list of all MPC objects stored
% in a MAT file generated by the GUI that belong to a given project 
%
% mpcobjlist=MPC_LOADOBJ(filename,projname,taskname) only lists those belonging
% to a given task
%
% mpcobj=MPC_LOADOBJ(filename,projname,taskname,mpcname) gets the actual
% MPC object corresponding to a given project, task, and controller.

%   Authors: A. Bemporad
%   Copyright 1986-2007 The MathWorks, Inc.
%   $Revision: 1.1.6.3 $  $Date: 2007/11/09 20:47:09 $

error(nargchk(1,4,nargin))

mpcobj={};
if nargin<4,
    mpcname=[];
    if nargin<3,
        taskname=[];
        if nargin<2,
            projname=[];
        end
    end
end

file=filename;
if ~strcmpi(file(end-3:end),'.mat'),
    file=[file '.mat'];
end
aux=which(file);
if isempty(aux),
    ctrlMsgUtils.error('MPC:general:FileNotFound',file);
end

if ispc,
    theslash='\';
else
    theslash='/';
end

theslashes=strfind(aux,theslash);
filepath=aux(1:theslashes(end));
file=file(1:end-4); % Takes out '.mat'

% Get list of MPC objects in the given project and task
try
    load([filepath file]);
catch ME
    ctrlMsgUtils.error('MPC:designtool:PrjFileLoadFailure',[filepath file]);
end
    
if ~exist('Projects','var') || ~isa(Projects,'mpcnodes.MPCGUI'),
    % The MAT File does not contain an MPC design project so treat it as a standard MAT file
    % List the names of all MPC objects stored in the MAT file
    allvars=whos;
    j=0;
    for i=1:length(allvars),
        if strcmp(allvars(i).class,'mpc'),
            j=j+1;
            mpcobj{j,1}=allvars(i).name;
        end
    end
    if nargin==4,
        % Needs to grab a predefined MPC object
       info = whos(mpcname);
       if isempty(info) || strcmpi(info.class,'mpc')
           ctrlMsgUtils.error('MPC:designtool:MPCObjectNotFoundinWorkspace',mpcname);
       else
           mpcobj=eval(mpcname);
       end
    else    
        mpcname=mpcobj{1}; % Grab the first one
    end
    return
end

if ~isempty(projname),
    % thisproj must be empty or singleton by design
    thisproj = find(Projects,'Label',projname,'-depth',0);
    if isempty(thisproj)
        return
    end
else
    % Empty project name
    mpctasks = Projects.find('-class','mpcnodes.MPCGUI');
    
    if isempty(mpctasks)
        % No MPC Tasks
        return
    end
    
    errflag=0;
    if length(mpctasks)==1,
        thistask=mpctasks(1);
        thisproj=thistask.up; % This would either be a project 
        % or the workspace (if generated from command line)
    
        if ~isempty(taskname) && ~strcmp(thistask.Label,taskname),
            errflag=1;
        end
        tasklist={thistask.Label};
    else
        tasklist={};
        for i=1:length(mpctasks),
            proji=mpctasks(i).up;
            if ~isempty(proji),
                proji=proji.Label;
                taskname=[mpctasks(i).Label '-' proji];
            else
                taskname=mpctasks(i).Label;
            end
            tasklist{i}=taskname;
        end
        
        if ~isempty(taskname),
            thistask = Projects.find('-class','mpcnodes.MPCGUI','-depth',1,'Label',taskname);
            if isempty(thistask),
                errflag=1;
            else
                thisproj=thistask.up;
            end
        end
    end    
    if errflag,
        ctrlMsgUtils.error('MPC:designtool:MPCTaskNotFound');        
    end
    
    if isempty(taskname) && length(tasklist)>1,
        % Let the user choose the MPC task
        [choice,ok]=listdlg('PromptString',ctrlMsgUtils.message('MPC:designtool:ChooseMPCTask'),...
            'SelectionMode','single','ListString',tasklist,'ListSize',[350 150],...
            'Name',ctrlMsgUtils.message('MPC:designtool:DialogTitleQuestion'));
        thistask=mpctasks(choice);
        thisproj=thistask.up;
    end
end
    
% thistask must be empty or singleton by design
if isempty(taskname) && ~isempty(thisproj),
    thistask = thisproj.getChildren;
end

taskname=thistask.Label;
if ~isempty(thisproj),
    projname=thisproj.Label;
else
    projname=[];
end

if isempty(thistask)
    return
end

if nargin<4,
    % Return list of names of MPC objects
    controllerNodes = find(thistask,'-class','mpcnodes.MPCController');
    if isempty(controllerNodes),
        return
    end
    % Compile a list of MPC objects
    for k=1:length(controllerNodes),
        mpcobj{k} = controllerNodes(k).Label;
    end
    mpcname=mpcobj{1};
else
    % Return MPC object
    controllerNode = find(thistask,'-class','mpcnodes.MPCController','Label',mpcname);
    if isempty(controllerNode),
        ctrlMsgUtils.error('MPC:designtool:MPCControllerNotFound',mpcname,filename);
    end
    % Reconstruct MPC object
    mpcobj = controllerNode.getController;
end
