/* mpc_sfun.h: MPC Simulink/RTW S-Function - Macros */
               
/*
        Author: A. Bemporad
        Revised by: R. Chen
        Copyright 1986-2008 The MathWorks, Inc.
        $Revision: 1.1.10.17 $  $Date: 2009/08/08 01:11:24 $   
*/

/* Debug messages */ 
 
/*
   #ifndef DEBUG
   #define DEBUG
   #endif
*/

/* Standard prologue */
#include <stdlib.h>
#include <math.h>
#include "simstruc.h"
#include "mat_macros.h"

/* Special definition for IsNaN and IsInf */
#define FIEEE_LE 0
#define FIEEE_BE 1

#ifndef CPU_NUM_FORMAT
    #if defined(_M_IX86) || defined(_M_AMD64) || defined(__i386__) || defined(__x86_64__)
        #define CPU_NUM_FORMAT FIEEE_LE
    #else
        #define CPU_NUM_FORMAT FIEEE_BE
    #endif /* if defined */
#endif /* if ndef CPU */

#if CPU_NUM_FORMAT==FIEEE_LE
    /* Little-endian */
    typedef union 
    {
        double value;
        struct { uint32_T lw;
                 uint32_T hw;
               } words;
    } ieee_double_T;
#elif CPU_NUM_FORMAT==FIEEE_BE
    /* Big-endian */
    typedef union 
    {
        double value;
        struct { uint32_T hw;
             uint32_T lw;
               } words;
    } ieee_double_T;
#endif

/* We are being built using RTW */
#ifdef RT
    /* avoid debug messages */
	#ifdef DEBUG
		#undef DEBUG
	#endif
#endif

/* Parameter access macros */
/* Model parameters - Generated by the mpcinit.m initialization routine
   Expected to be initialized and stored in the workspace at compile time
   The number associated with ssGetSFcnParam corresponds to the order of
   the input arguments in MPCLIB.MDL/MPCSFUN. To edit the parameters:
   1)Edit MPCLIB.MDL in M-Editor and make sure the list of parameters is
   consistent with the above list.
   2)Edit MPC_GET_PARAM_SIM.M
*/

/* Model/observer-related parameters */
#define p_Ts(S)               ssGetSFcnParam(S,0)
#define p_A(S)                ssGetSFcnParam(S,1)
#define p_Cm(S)               ssGetSFcnParam(S,2)
#define p_Dvm(S)              ssGetSFcnParam(S,3)
#define p_Bu(S)               ssGetSFcnParam(S,4)
#define p_Bv(S)               ssGetSFcnParam(S,5)
#define p_nu(S)               ssGetSFcnParam(S,7)
#define p_nv(S)               ssGetSFcnParam(S,8) /* total number of MDs, including the one due to offsets */ 
#define p_nym(S)              ssGetSFcnParam(S,9)
#define p_ny(S)               ssGetSFcnParam(S,10)
#define p_nx(S)               ssGetSFcnParam(S,11)
#define p_uoff(S)             ssGetSFcnParam(S,36)
#define p_yoff(S)             ssGetSFcnParam(S,37)
#define p_voff(S)             ssGetSFcnParam(S,38)
#define p_myoff(S)            ssGetSFcnParam(S,39)
#define p_lastx(S)            ssGetSFcnParam(S,31)
#define p_lastu(S)            ssGetSFcnParam(S,32)

/* Optimization-related parameters */
#define p_PTYPE(S)            ssGetSFcnParam(S,6)
#define p_degrees(S)          ssGetSFcnParam(S,12)
#define p_M(S)                ssGetSFcnParam(S,13)
#define p_MuKduINV(S)         ssGetSFcnParam(S,14)
#define p_KduINV(S)           ssGetSFcnParam(S,15) 
#define p_Kx(S)               ssGetSFcnParam(S,16)
#define p_Ku1(S)              ssGetSFcnParam(S,17)
#define p_Kut(S)              ssGetSFcnParam(S,18)
#define p_Kr(S)               ssGetSFcnParam(S,19)
#define p_Kv(S)               ssGetSFcnParam(S,20)
#define p_zmin(S)             ssGetSFcnParam(S,21)
#define p_rhsc0(S)            ssGetSFcnParam(S,22)
#define p_Mlim(S)             ssGetSFcnParam(S,23)
#define p_Mx(S)               ssGetSFcnParam(S,24)
#define p_Mu1(S)              ssGetSFcnParam(S,25)
#define p_Mv(S)               ssGetSFcnParam(S,26)
#define p_rhsa0(S)            ssGetSFcnParam(S,27)
#define p_TAB(S)              ssGetSFcnParam(S,28)
#define p_optimalseq(S)       ssGetSFcnParam(S,29)
#define p_utarget(S)          ssGetSFcnParam(S,30)
#define p_p(S)                ssGetSFcnParam(S,33)
#define p_Jm(S)               ssGetSFcnParam(S,34)
#define p_DUFree(S)           ssGetSFcnParam(S,35)
#define p_maxiter(S)          ssGetSFcnParam(S,48)
#define p_nxQP(S)             ssGetSFcnParam(S,49)
#define p_wtab(S)             ssGetSFcnParam(S,55)

/* Parameters related to MD and REFs */
#define p_no_md(S)            ssGetSFcnParam(S,40) 
#define p_no_ref(S)           ssGetSFcnParam(S,41) 
#define p_ref_from_ws(S)      ssGetSFcnParam(S,42) 
#define p_ref_signal(S)       ssGetSFcnParam(S,43) 
#define p_ref_preview(S)      ssGetSFcnParam(S,44) 
#define p_md_from_ws(S)       ssGetSFcnParam(S,45) 
#define p_md_signal(S)        ssGetSFcnParam(S,46) 
#define p_md_preview(S)       ssGetSFcnParam(S,47) 

/* Block-related paramteres */
#define p_openloopflag(S)     ssGetSFcnParam(S,50) /* jgo */
#define p_md_inport(S)        ssGetSFcnParam(S,51)
#define p_no_ym(S)            ssGetSFcnParam(S,52)
#define p_mv_inport(S)        ssGetSFcnParam(S,53)
#define p_no_mv(S)            ssGetSFcnParam(S,54)
#define p_lims_inport(S)      ssGetSFcnParam(S,56)
#define p_no_umin(S)          ssGetSFcnParam(S,57)
#define p_no_umax(S)          ssGetSFcnParam(S,58)
#define p_no_ymin(S)          ssGetSFcnParam(S,59)
#define p_no_ymax(S)          ssGetSFcnParam(S,60)
#define p_switch_inport(S)    ssGetSFcnParam(S,61)
#define p_no_switch(S)        ssGetSFcnParam(S,62)
#define p_enable_value(S)     ssGetSFcnParam(S,63)
#define p_is_multiple(S)      ssGetSFcnParam(S,64)

#define NPARAMS 65          /* Total number of parameters */

#define CONSTR_TOL 1.0e-5   /* tolerance for time-varying I/O constraints. There's always
                             * at least CONSTR_TOL betwen umin and umax, ymin and ymax */

/* Work variables and state access macros */
#define w_lastx         0  
#define w_lastu         1
#define w_v             2 
#define w_optimalseq    3
#define w_lastt         4  /* Time-step counter is needed for previewing signals, also needed for recognizing initialization phase in MdlOutputs*/

#define w_r             5  /* buffer */
#define w_ytilde        6  /* buffer */        
#define w_vKv           7  /* buffer */
#define w_Mvv           8  /* buffer */        
#define w_zopt1         9  /* buffer */
#define w_zopt2         10 /* buffer */
#define w_zopt3         11 /* buffer */
#define w_zopx          12 /* buffer */        
#define w_ztemp         13  /* buffer */
#define w_rhsa          14  /* buffer */
#define w_rhsc          15  /* buffer */        
#define w_basis         16  /* buffer */        
#define w_duold         17  /* buffer */
#define w_ib            18  /* buffer */        
#define w_il            19  /* buffer */
#define w_umin          20  /* buffer */
#define w_umax          21  /* buffer */
#define w_ymin          22  /* buffer */
#define w_ymax          23  /* buffer */
#define w_xk            24  /* buffer */        
#define w_tab           25  /* buffer */
#define w_lastx_buf     26  /* buffer */
#define w_lastu_buf     27  /* buffer */
        
#define NPWORK 28

/* Misc Constants */
#define SOFTCONSTR 0   /* Optimization types */
#define HARDCONSTR 1
#define UNCONSTR   2

/* Parameter error message */
#define param_MSG "Parameter number mismatch"

/* IsInf in ANSI C */
boolean_T utIsInf(double a)
{ /* Begin utIsInf */
    ieee_double_T tem;
    tem.value = a;
    return (boolean_T) (((tem.words.hw & 0x7fffffff) == 0x7ff00000) &&\
                   ( tem.words.lw == 0));
}/* End utIsInf */

/* IsNaN in ANSI C */
boolean_T utIsNaN(double a) 
{ 
    return (a != a); 
}

